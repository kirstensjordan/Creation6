//Kirsten Jordan
//Novemeber 28, 2022
//COSC 1437 
//Basis by DrT in DrTRestaruantStructStyleCPP


#include <iostream>
#include<string>
#include<vector>
#include<iomanip>
using namespace std; 

struct MenuItem
{
  string name;
  double itemCost; 
  string desc; 
  char addLetter; 
  char removeLetter;
  int count; 
};

//function definitions
void populateMenu(vector<MenuItem> &entireMenu)
{
  //put some default values in our Menu
  const int numItems = 7; 
  MenuItem Item1; 
  MenuItem Item2;
  MenuItem Item3; 
  MenuItem Item4;
  MenuItem Item5;
  MenuItem Item6;
  MenuItem Item7;    

  entireMenu.push_back(Item1); //add to the end of list the Item1
  entireMenu.push_back(Item2); //add to the end of list the Item2
  entireMenu.push_back(Item3); //add to the end of list the Item3
  entireMenu.push_back(Item4); //add to the end of list the Item4
  entireMenu.push_back(Item5); //add to the end of list the Item5
  entireMenu.push_back(Item6); //add to the end of list the Item6
  entireMenu.push_back(Item7); //add to the end of list the Item7

  vector<string> defaultMenuNames = {"\x1b[35;1mCupcake  \x1b[0m", "\x1b[35;1mCookie   \x1b[0m", "\x1b[35;1mCake     \x1b[0m", "\x1b[35;1mCake Pop \x1b[0m", "\x1b[35;1mBrownies \x1b[0m", "\x1b[35;1mCroissant\x1b[0m", "\x1b[35;1mSoda     \x1b[0m"}; 
  vector<char> defaultAddLetters = {'A', 'B', 'C', 'D', 'E', 'F', 'G'}; 
  vector<char> defaultRemoveLetters = {'a', 'b', 'c', 'd', 'e', 'f', 'g'}; 

  for(int i = 0; i < numItems; i++)
  {
    //add each item to the default list efficiently 
    entireMenu[i].name = defaultMenuNames[i]; 
    entireMenu[i].addLetter = defaultAddLetters[i]; 
    entireMenu[i].removeLetter = defaultRemoveLetters[i]; 
    entireMenu[i].itemCost = (3.00 + i); //set a random starter cost for each item
    entireMenu[i].count = 0; //initialze all counts to 0
    entireMenu[i].desc = "delicious"; //set all default desc to "delicous"
  }


}

void showMenu(vector<MenuItem> &m)
{
  cout << fixed << setprecision(2);//set doubles to 2 decimal places
  cout << "\x1b[35;1mSkye's Sweet Menu\x1b[0m\n" << endl; 
  cout << "\tNAME \t   COST \tREMOVE\tCOUNT\tDESC"<<endl;
  for(int i = 0; i < m.size(); i++)
  {
    cout << m[i].addLetter << ")" << setw(10) << m[i].name 
    << setw(5) << "$" << m[i].itemCost << setw(5) << "(" << m[i].removeLetter
    << ")" << setw(7) << m[i].count << setw(13) << m[i].desc 
    <<endl; 
  }

}

void acceptOrder(vector<MenuItem> &m)
{
  char option = '\0';// the user-selected menu item
  double subtotal = 0.0; 
  double tipMoney = 0.0;
  double totalCost = 0.0;
  bool paymentCredit = false;
  double payment = 0.0;
  double change = -1.0;

  do
  {
    cout << "\nPlease choose an item (x to Exit): ";
    cin >> option; 

    for(int i=0; i < m.size(); i++)
    {
      if(option == m[i].addLetter)
      {
        cout << "\nMenu Item " << m[i].addLetter << " selected."; 
        m[i].count++; //increment the count by 1
        cout << "\033[2J\033[1;1H"; //clear screen 
        cout << "\n1 UP on " << m[i].name << endl;
        subtotal += m[i].itemCost; //increment the subtotal by the cost of the item 
        showMenu(m); //show the updated menu
        cout << "\nSubtotal: $" << subtotal << endl;  
      }
      else if(option == m[i].removeLetter)
      {
        cout << "\nRemove Item " << m[i].removeLetter << " selected."; 
        if(m[i].count > 0) //subtract if and only if the count is > 0
        {
          m[i].count--; //decrement the count by 1
          cout << "\033[2J\033[1;1H"; //clear screen 
          cout << "\n1 DOWN on " << m[i].name << endl;
          subtotal -= m[i].itemCost; //decrement the subtotal by the cost of the item
          showMenu(m); //show the updated menu
          cout << "\nSubtotal: $" << subtotal << endl;  
        }
        else //the the user why you blocked item removal 
        {
            
            cout << "\nItem count must be > 0 to remove: " << m[i].name << endl;
        }
      }
      else if(
                option != m[i].addLetter && 
                option != m[i].removeLetter &&
                option != 'x' &&
                option != 'X' 
            ) //test for all of my valid inputs
            {
              if(i == 0)
              {
                cout << "\nInvalid input (" << option << "). Please try again." << endl; 
              }  
            }
    }
  }while(option != 'x' && option != 'X'); 
  cout << "\nThank you for placing your order." << endl; 

  //the tax process
  double tax = (subtotal * 0.0825);
  int thing =0;
  cout << "Tax: $" << tax << endl;

    //the tip process
  cout << "\nPlease provide a tip. Suggested tip is 20% or more." << endl << "20% Tip = $" << (subtotal * 0.20) << endl << "Input Tip:$ "<<endl;
  cin >> tipMoney;
  cout << "\n Total Tip: $" << tipMoney << endl;
  
    //Total total
  totalCost = subtotal + tipMoney + tax;
  cout << "\n The total cost is: $" << totalCost << endl;

  //Payment 
  cout << "Will you be paying with Cash or Credit Card? (0 for cash, 1 for credit)";
  cin >> paymentCredit;

  if (!paymentCredit)
    {
      while (change < 0)
        {
          cout << "How much cash are you giving?: ";
          cin >> payment;
          change = payment - (totalCost);
          if (payment > totalCost)
            {
              cout << "Your change is: $" << change << endl;
            }
          else if (payment < totalCost)
          {
            cout << "That is not enough money. Please try again.";
          }
          else if (payment == totalCost)
          {
            cout << "Thank you! You have no change." << endl;
          }
        }
    }
  else
  {
    cout << "Processing Payment"<<endl<<"Approved"<<endl;
  }
  
  //handle reciept generation here
  cout << "\nReciept"<< endl;
  cout << "Subtotal: $" << subtotal<< endl;
  cout << "Tax: $" << tax << endl;
  cout << "Tip: $" << tipMoney << endl;
  cout << "Total: $" << subtotal + tipMoney +tax << endl << endl;
}

int main() 
{
  vector<MenuItem> wholeMenu; 
  populateMenu(wholeMenu); //put some default values in the menu
  showMenu(wholeMenu); //print the current data of the menu on screen 
  acceptOrder(wholeMenu); 
  
  return 0; 
}
